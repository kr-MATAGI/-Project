#include <stdio.h>
#include <iostream>
#include <stdlib.h>
#include <string>
#include <vector>
#define MIN(a,b) (a>b ? b : a)

using namespace std;

FILE *in = fopen("color.inp", "r");
FILE *out = fopen("color.out", "w");

int i, j, k;
int add, minus;

int DP[5001][5001];
char A[5002]; //첫 번째 라인
char B[5002]; //두 번째 라인
char C[5002];
int AZ[27][3]; // 시작과 끝
int c_cnt;

//초기화
void reset()
{
	for (i = 0; i < 5001; i++) {
		for (j = 0; j < 5001; j++) {
			DP[i][j] = 0;
		}
	}
	for (i = 0; i < 5002; i++) {
		A[i] = NULL;
		B[i] = NULL;
	}
	for (i = 0; i < 10004; i++) {
		C[i] = NULL;
	}
}

//갯수
int car_cnt(char a[])
{

	for (i = 0; ; i++) {
		if (a[i] == NULL) {
			return i;
			break;
		}

	}
}

//시작점과 출발점
void start_end(int a_cnt, int b_cnt) {

	int zari = 0;
	int start_index;
	int end_index;

	for (i = 0; i < a_cnt + b_cnt; i++) {
		for (j = i+1; j < a_cnt + b_cnt; j++) {
			//이미 검사한 문자면 null로 만든다.
			if (C[i] == NULL)
				break;
			if (C[i] != NULL) {
				start_index = i; //시작점
				if (C[i] == C[j]) { //끝나는점
					end_index = j;
					C[j] = NULL;
				}	
			}
		}
		if (C[i] != NULL) {
			AZ[zari][0] = start_index + 1;
			AZ[zari][1] = end_index + 1;
			C[i] = NULL;
			zari++;
			c_cnt++;
		}
	}
}

//진행중인거 계산 하는곳
void start(int a, int b, int a_cnt, int b_cnt)
{
	int k = 0; 
	int plus;
	plus = 0;

	for (k = 0; k < c_cnt; k++) {
		AZ[k][2] = 0;
	}

	//A지점에서 스타트하는것들
	for (k = 0; k < c_cnt; k++) {
		if (AZ[k][0] <= b) {
			AZ[k][2]++;
		}
		else if (AZ[k][0] > a_cnt) {
			if (AZ[k][0] - a_cnt <= a)
				AZ[k][2]++;
		}
		if (AZ[k][1] <= a)
			AZ[k][2]++;
		else if (AZ[k][1] > a_cnt) {
			if (AZ[k][1] - a_cnt <= a) {
				AZ[k][2]++;
			}
		}
	}

	for (k = 0; k < c_cnt; k++) {
		if (AZ[k][2] == 1) {
			plus++;
		}
	}

	add = plus;
}


int main()
{
	int T; //테스트 케이스
	int t;
	int pro_cnt;//현재 계속 추가될수있는 것들 +
	int A_cnt, B_cnt;
	int min;
	int x, y;

	fscanf(in, "%d", &T);

	for (t = 1; t <= T; t++) {
		c_cnt = 0;
		fscanf(in, "%s", &A);
		fscanf(in, "%s", &B);

		//A,B 차선의 갯수 확인.
		A_cnt = car_cnt(A);
		B_cnt = car_cnt(B);

		//각 색깔의 시작과 끝
		strcat(C, A);
		strcat(C, B);
		start_end(A_cnt, B_cnt);
		for (i = 0; i < A_cnt + B_cnt; i++) {
			C[i] = NULL;
		}
		strcat(C, A);
		strcat(C, B);

		//DP를 만드는곳
		pro_cnt = 0;
		for (x = 0; x <= B_cnt; x++) {
			for (y = 0; y <= A_cnt; y++) {
				if (x == 0 && y == 0)
					continue;
				start(x, y, A_cnt, B_cnt);

				if (x == 0)
					DP[x][y] = DP[x][y - 1] + add;
				else if (y == 0)
					DP[x][y] = DP[x - 1][y] + add;
				else
					DP[x][y] = MIN(DP[x - 1][y], DP[x][y - 1]) + add;
			}
		}

		printf("%d", DP[B_cnt][A_cnt]);
	}
}