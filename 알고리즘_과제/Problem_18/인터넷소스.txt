#include <stdio.h>
#include <iostream>
#include <stdlib.h>
#include <string>
#include <vector>

using namespace std;

FILE *in = fopen("color.inp", "r");
FILE *out = fopen("color.out", "w");

int i, j, k, n, m;
string a, b;


int dp[5002][5002];
int alpha[128];
int aCnt[5002][128], bCnt[5002][128];

int MIN(int a, int b) {
	if (a < b)
		return a;
	else
		return b;
}

void countAlpha(const string &s, int t[5002][128]) {
	int len = s.length();

	for (i = 0; i < len; i++) {
		alpha[s[i]]++;

		for (j = 'A'; j <= 'Z'; j++) {
			if (s[i] == j) {
				t[i + 1][j]++;
			}
			t[i + 1][j] += t[i][j];
		}
	}
}

int getCost(int i, int j, char ch) {
	int res = 0;

	if (aCnt[i][ch] + bCnt[j][ch] == 1) {
		res -= i + j;
	}
	if (aCnt[i][ch] + bCnt[j][ch] == alpha[ch]) {
		res += i + j;
	}

	return res;

}

void solve() {
	for (i = 0; i <= n; i++) {
		for (j = 0; j <= m; j++) {
			dp[i][j] = n*m;
		}
	}

	dp[0][0] = 0;

	for (i = 0; i <= n; i++) {
		for (j = 0; j <= m; j++) {
			if (dp[i][j] == n*m) break;

			if (i + 1 <= n) {
				dp[i + 1][j] = MIN(dp[i + 1][j], dp[i][j] + getCost(i + 1, j, a[i]));
			}
			if (j + 1 <= m) {
				dp[i][j + 1] = MIN(dp[i][j + 1], dp[i][j] + getCost(i, j + 1, b[j]));
			}
		}
	}
	fprintf(out, "%d\n", dp[n][m]);
}

int main() {
	int T;
	fscanf(in, "%d", &T);

	while (T--) {
		cin >> a >> b;

		n = a.length();
		m = b.length();

		memset(alpha, 0, sizeof(alpha));
		memset(aCnt, 0, sizeof(aCnt));
		memset(bCnt, 0, sizeof(bCnt));
		countAlpha(a, aCnt);
		countAlpha(b, bCnt);

		solve();
	}
}