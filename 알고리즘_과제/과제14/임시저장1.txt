#include <stdio.h>
#include <stdlib.h>
#include <string.h>

FILE *in = fopen("coin.inp", "r");
FILE *out = fopen("coin.out", "w");

int i, j, k, t;
int a, b, c;

//DP[A][B][C]
int DP[101][101][101];

int shift(int number)
{
	if (number == 3)
		return 2;
	else if (number == 2)
		return 3;
}

int check_three(int A, int B, int C)
{
	int count;
	count = 0;

	for (a = 1; a <= 3; a++) {
		if (A - a < 0)
			break;
		if (DP[A - a][B][C] == -1) {
			count++;
			break;
		}
	}

	for (b = 1; b <= 3; b++) {
		if (B - b < 0)
			break;
		if (DP[A][B - b][C] == -1) {
			count++;
			break;
		}
	}

	for (c = 1; c <= 3; c++) {
		if (C - c < 0)
			break;
		if (DP[A][B][C - c] == -1) {
			count++;
			break;
		}
	}

	if (count == 0) {
		return -1;
	}
	else
		return 0;
}

int check_two(int A, int B, int C)
{
	int count;
	count = 0;

	for (a = 1; a <= 2; a++) {
		if (A - a < 0)
			break;
		if (DP[A - a][B][C] == -1) {
			count++;
			break;
		}
	}

	for (b = 1; b <= 2; b++) {
		if (B - b < 0)
			break;
		if (DP[A][B - b][C] == -1) {
			count++;
			break;
		}
	}

	for (c = 1; c <= 2; c++) {
		if (C - c < 0)
			break;
		if (DP[A][B][C - c] == -1) {
			count++;
			break;
		}
	}

	if (count == 0) {
		return -1;
	}
	else
		return 0;
}


int main()
{
	int T; // 테스트 케이스
	int A, B, C; //병
	int sf_count; //3개와 2개를 바꿔가면서
	sf_count = 2;

	//엘리스가 0이면 이기고 -1이면 진다.
	//DP처음 수 초기화
	DP[0][0][1] = -1;
	DP[0][1][0] = -1;
	DP[1][0][0] = -1;

	//DP를 먼저 만들어 놓고 시작
	//이전플레이어가 k개를 가지고 가면 현재 플레이어는 k개를 못 가지고 간다?
	//그렇다면 3개와 2개의 반복이 아닌가?
	for (i = 0; i < 101; i++) {
		for (j = 0; j < 101; j++) {
			for (k = 0; k < 101; k++) {
				if (i == 0 && j == 0 && k == 1) {
					sf_count = shift(sf_count);
					continue;
				}
				if (i == 0 && j == 1 && k == 0) {
					sf_count = shift(sf_count);
					continue;
				}
				if (i == 1 && j == 0 && k == 0) {
					sf_count = shift(sf_count);
					continue;
				}
				if (i == 0 && j == 0 && k == 0)
					continue;
				//
				if (sf_count == 3) {
					DP[i][j][k] = check_three(i, j, k);
					sf_count = shift(sf_count);
				}
				else if (sf_count == 2) {
					DP[i][j][k] = check_two(i, j, k);
					sf_count = shift(sf_count);
				}
			}
		}
	}

	fscanf(in, "%d", &T);

	for (t = 0; t < T; t++) {

		fscanf(in, "%d %d %d", &A, &B, &C);


		//엘리스가 이김  > 1 출력
		if (DP[A][B][C] == 0)
			fprintf(out, "(%d %d %d) : 1\n", A, B, C);

		else if(DP[A][B][C] == -1)
			//엘리스가 짐 > -1 출력
			fprintf(out, "(%d %d %d) : -1\n", A, B, C);

	}


}