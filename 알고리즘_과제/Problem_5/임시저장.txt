#include <stdio.h>
#include <stdlib.h>
#include <string.h>

FILE *in = fopen("bitmap.inp", "r");
FILE *out = fopen("bitmap.out", "w");

char **arr;
//char **c_arr; //값을 옮겨와서 검사할 곳.
int i, j;
int row, col; //행과 열을 입력받음
char list[201];
char BD; //B와 D인지 입력받음
int list_count;

void B_cal(int s_r, int b_r, int s_c, int b_c) {
	int small_row, small_col; //쿼터 계산시 쓰는 행과 열 시작값.
	int big_row, big_col;//쿼터 계산시 쓰는 행과 열 끝값
	int one_count;//1의 갯수 세기
				  //1의 갯수가 1개 라도 있으면 그건 D
	int mid_row, mid_col;
	one_count = 0;
	small_row = s_r;
	big_row = b_r;
	small_col = s_c;
	big_col = b_c;
	mid_row = (big_row + small_row) / 2;
	mid_col = (small_col + big_col) / 2;
	while (big_row != 1 && big_col != 1) {


		//arr배열을 c_arr배열로 옮기기.
		/*for (i = small_row; i <= big_row; i++) {
			for (j = small_col; j <= big_col; j++) {
				c_arr[i][j] = arr[i][j];
			}
		}*/

		//배열을 돌아서 1의 갯수 검사하기
		for (i = small_row; i <= big_row; i++) {
			for (j = small_col; j <= big_col; j++) {
				if (arr[i][j] == '1') one_count++;//1이 나오면 카온트 추가
			}
		}
		//모두가 1이 입력들어왔을 경우
		if (one_count == (big_col - small_col + 1) * (big_row - small_row + 1)) {
			fprintf(out, "1");
			printf("1");
		}
		//모두가 0이 입력이 들어왔을경우
		else if (one_count == 0) {
			fprintf(out, "0");
			printf("0");
		}
		//0과 1 섞여서 들어왔을 경우
		else if (one_count >= 1) {

			fprintf(out, "D");
			printf("D");
			if ((mid_row == small_row && mid_col == small_col) || (mid_col == 1 || mid_row == 1)) {
				for (i = small_row; i <= big_row; i++) {
					for (j = small_col; j <= big_col; j++) {
						fprintf(out, "%c", arr[i][j]);
						printf("%c", arr[i][j]);

					}
				}
				return;
			}

			B_cal(small_row, mid_row, small_col, mid_col);
			B_cal(small_row, mid_row, mid_col + 1, big_col);
			B_cal(mid_row + 1, big_row, small_col, mid_col);
			B_cal(mid_row + 1, big_row, mid_col + 1, big_col);
		}
		return;
	}
}

void D_cal(int s_r, int b_r, int s_c, int b_c) {

	int save_ch; //D다음에 0이나 1을 저장할것.

	int small_row, small_col; //쿼터 계산시 쓰는 행과 열 시작값.
	int big_row, big_col;//쿼터 계산시 쓰는 행과 열 끝값
	int mid_row, mid_col;

	small_row = s_r;
	big_row = b_r;
	small_col = s_c;
	big_col = b_c;
	mid_row = (big_row + small_row) / 2;
	mid_col = (small_col + big_col) / 2;

	//D가 들어온다
	if (list[list_count] == 'D') {
		if (big_row-small_row != 1 && big_col-small_col !=1) {
			list_count++;
			D_cal(small_row, mid_row, small_col, mid_col);
			D_cal(small_row, mid_row, mid_col + 1, big_col);
			D_cal(mid_row + 1, big_row, small_col, mid_col);
			D_cal(mid_row + 1, big_row, mid_col + 1, big_col);
		}
	}

	//숫자 > D 일경우 숫자로 다 채우기.
	if (list_count != 0 && list[list_count+1] == 'D' && list[list_count-1] =='D') {
		save_ch = list[list_count];
		for (i = small_row; i <= big_row; i++) {
			for (j = small_col; j <= big_col; j++) {
				arr[i][j] = save_ch;
			}
		}
		list_count++;
		return;
	}
	//아닐경우 D~D까지의 숫자를 배열에 채우기.
	else if (list_count !=0) {
		for (i = small_row; i <=big_row; i++) {
			for (j = small_col; j <= big_col; j++) {
				list_count++;
				save_ch = list[list_count];
				arr[i][j] = save_ch;
				
			}
		}
		
		return;
	}
}

int main()
{
	while (1)
	{
		list_count = 0;
		fscanf(in, "%s", &BD);
		if (BD == '#')
			break;

		fscanf(in, "%d %d", &row, &col);
		fscanf(in, "%s\n", &list);


		//입력받을 배열 row*col 동적할당
		arr = (char**)malloc(sizeof(char*) * (row + 1));
		for (i = 0; i < row + 1; i++) {
			arr[i] = (char*)malloc(sizeof(char)*(col + 1));
		}

		//값을 옮길 배열 row*col 동적할당
	/*	c_arr = (char**)malloc(sizeof(char*) * (row + 1));
		for (i = 0; i < row + 1; i++) {
			c_arr[i] = (char*)malloc(sizeof(char)*(col + 1));
		}*/

		//a로 초기화
		for (i = 0; i < row + 1; i++) {
			for (j = 0; j < col + 1; j++) {
				arr[i][j] = 'a';
			}
		}
		//for (i = 0; i < row + 1; i++) {
		//	for (j = 0; j < col + 1; j++) {
		//		c_arr[i][j] = 'a';
		//	}
		//}

		//B형식으로 시작할때 입력받기
		if (BD == 'B') {
			//fprintf(out, "%c %d %d", BD, row ,col);
			printf("D %d %d\n", row, col);
			//입력받기.
			for (i = 1; i < row + 1; i++) {
				for (j = 1; j < col + 1; j++) {
					arr[i][j] = list[list_count];
					list_count++;
				}
			}

			//입력 확인
		/*	for (i = 0; i < row + 1; i++) {
				for (j = 0; j < col + 1; j++) {
					printf("%c ", arr[i][j]);
				}
				printf("\n");
			}*/

			B_cal(1, row, 1, col);
		}


		//D형식일 때 입력 받기 및 계산
		else if (BD == 'D') {
			printf("D %d %d\n", row, col);

			//동적배열만들어 지는거 확인
			for (i = 0; i < row + 1; i++) {
				for (j = 0; j < col + 1; j++) {
					printf("%c ", arr[i][j]);
				}
				printf("\n");
			}

			//첫글자가 0이면 모두가 0이다
			if (list[0] == '0') {
				for (i = 1; i <= row; i++) {
					for (j = 1; j <= col; j++) {
						fprintf(out, "0");
						printf("0");
					}
				}
			}
			//첫글자가 1이면 모두가 1이다.
			else if (list[0] == '1') {
				for (i = 1; i <= row; i++) {
					for (j = 1; j <= col; j++) {
						fprintf(out, "1");
						printf("1");
					}
				}
			}

			else {
				D_cal(1, row, 1, col);

				for (i = 1; i <= row; i++) {
					for (j = 1; j <= col; j++) {
						fprintf(out, "%c", arr[i][j]);
						printf("%c ", arr[i][j]);
					}
					printf("\n");
				}
			}
		}
	}
}