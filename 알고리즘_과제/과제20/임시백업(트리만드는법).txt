#include <stdio.h>
#include <iostream>
#include <stdlib.h>
#include <string>

FILE *in = fopen("maze.inp", "r");
FILE *out = fopen("maze.out", "w");

using namespace std;

int arr[100000];

int row, col;

int start, cal_end, sum_kan;
typedef struct TREENODE {
	int index;
	bool east;//동
	bool west;//서
	bool south;//남
	bool north;//북

	struct TREENODE *E;
	struct TREENODE *W;
	struct TREENODE *S;
	struct TREENODE *N;
	struct TREENODE *P;//부모
}node;



node* addTree(node* p, int index) {
	if (p == NULL) {
		node* temp;
		temp = (node*)malloc(sizeof(node));
		temp->index = index;
		//동
		if (index + 1 >= col)
			temp->east = false;
		temp->east = true;

		//서
		if (index - 1 < 0)
			temp->west = false;
		else if (arr[index - 1] == 0 || arr[index - 1] == 2)
			temp->west = false;
		else
			temp->west = true;

		//남
		if (index + col >= sum_kan)
			temp->south = false;
		temp->south = true;

		//북
		if (index - col < 0)
			temp->north = false;
		else if (arr[index - col] == 0 || arr[index - col] == 1)
			temp->north = false;
		else
			temp->north = true;

		temp->E = NULL;
		temp->W = NULL;
		temp->S = NULL;
		temp->N = NULL;

		return temp;
	}
	p->E = addTree(p->E, arr[index + 1]);
	p->W = addTree(p->W, arr[index - 1]);
	p->S = addTree(p->S, arr[index + col]);
	p->N = addTree(p->N, arr[index - col]);

}


int main()
{


	int block, index, pre_index;

	

	fscanf(in, "%d %d", &row, &col);

	start = 0;
	cal_end = row*col - 1;
	sum_kan = row*col;
	pre_index = 0;

	node* root;
	node* head;

	root = head = NULL;

	while (1) {
		fscanf(in, "%d %d", &index, &block);
		if (index == -1 && block == -1)
			break;

		for (int i = pre_index; i < row*col; i++) {
			if (i == index) {
				arr[i] = block;
				pre_index = i;
				break;
			}
		}

		head = addTree(head, 0);
		root = head;

		for (int i = 1; i < row*col; i++) {
			

		}

		/*0 : 남 동 불가능
		  1 : 동 가능
		  2 : 남 가능
		  3 : 남동 가능
		*/

	}

}