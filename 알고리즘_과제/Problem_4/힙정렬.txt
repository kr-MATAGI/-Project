typedef struct HeapType {
	int heap[8000];
	int size;
}HeapType;

void insert_max_heap(HeapType *h, int item)
{
	int i;
	for (i = 1; i <= h->size; i++) {
		if (h->heap[i] == item)
			return;
	}

	h->size = h->size + 1;
	i = h->size; //히프 크기가 하나 증가

	//트리를 거슬러 올라가면서 부모노드와 비교
	while ((i != 1) && (item > h->heap[i / 2])) {
		h->heap[i] = h->heap[i / 2];
		i = i / 2;
	}
	h->heap[i] = item;
}

int delete_max_heap(HeapType *h)
{
	int parent, child;
	int item, temp;

	item = h->heap[1]; //삭제할 루트 노드
	temp = h->heap[(h->size)--];

	parent = 1;
	child = 2; //child는 아래로 아래로 그리고 parent는 child를 따라감.

	while (child <= h->size) {
		//현재 노드의 자식중에서 더 작은 자식노드를 찾는다.
		if ((child < h->size) && (h->heap[child]) < (h->heap[child + 1]))
			child++; //child가 오른쪽 자식
		if (temp >= h->heap[child]) break; //맨밑에 내려옴
		//한단계 아래로 이동
		h->heap[parent] = h->heap[child];
		parent = child;
		child *= 2;
	}
	h->heap[parent] = temp;
	return item;
}


HeapType *init()
{
	HeapType *h = (HeapType*)malloc(sizeof(HeapType));
	h->size = 0;

	return h;
}